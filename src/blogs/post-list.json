[{"title":"我遇到一个Bug，金额大于一千万就报错","date":"2016-01-13T13:43:13.000Z","tags":["java","jackson"],"photos":["/resources/a-strange-bug/BUG.png"],"thumbnail":"/resources/a-strange-bug/BUG.png","previewText":"\n这是一个在测试环境发现的一个BUG，感觉很有趣，便写出来分享一下。本文的灵感以及标题都来自于《我遇到一个BUG，每逢周三就崩溃》。\n我在银行做系统开发，“金额”基本上是最常见的字段，也是最不能出错的字段了。每一个错误都代表着实打实的资金损失，无论是客户的还是银行的。所以，作为开发人员，对这个字段也相对敏感一些。金额这个字段的规则也相对其他字段更复杂一些。举个例子来说，金额是一个数字，可以是这样12；当然也有小数点的情况，比如这样12.34；人们还有这样的习惯，每隔3位有一个逗号分隔符，比如这样1,000.23。可是一千万是个什么特殊情况，为什么会有问题呢？\n"},{"title":"使用CNPM搭建私有NPM仓库","date":"2016-06-01T11:13:52.000Z","tags":["Nodejs","cnpm"],"photos":["/resources/cnpm-local-npm-server/cnpmtitle.png"],"thumbnail":"/resources/cnpm-local-npm-server/cnpmtitle.png","previewText":"我们在使用Nodejs的时候，使用npm仓库来发布和管理模块，我们可以从npm上下载别人发布的模块使用，也可以自己发布模块，有点类似于Maven，这是非常流行的开源社区模式。但是在企业内部，我们不希望我们的生产代码可以随意引用任何未经企业审核的代码；我们也不希望企业内部自己的模块发布给任意人员使用；还有一个重要的原因是很多企业内部无法连接互联网`cnpm`就是来解决这些问题的。官方的解释是`cnpm`=**Company npm**\n# 环境配置\n* OS：Red Hat Enterprise Linux Server release 6.4 (Santiago)\n* node：v4.4.5\n* npm：2.15.5\n* cnpm：2.10.0（截止到本文发布）\n\n"},{"title":"nodejs部署方式-pm2(一)","date":"2016-12-02T13:02:10.000Z","tags":["Nodejs","pm2"],"photos":["/resources/deploy-nodejs-pm2-1/pm2.png"],"thumbnail":"/resources/deploy-nodejs-pm2-1/pm2.png","previewText":"\n目前Nodejs开发中有很多痛点，其中有一个是修改完代码以后需要我们重启服务才能看到效果。这样一次次的杀进程、重启，杀进程、重启很让人头大。程序员是最痛恨重复工作的物种，之前有了解过的同学可能知道`forever`。`forever`可以帮我们解决上面的问题，通过对资源变化的检测做到变化后自动重启。开发阶段我们使用`node file.js`来启动另外由于Nodejs的单线程，任何异常都会导致整个服务中断，这对于生产上长时间提供服务的程序来讲是不可以的，`forever`可以帮我们在异常后重启，保证服务一直在线，我想这也就是它名字的由来吧。但我想说的是`forever`不够“高！大！上！”。接下来我要介绍一个足够高大上的神器--[`pm2`](http://pm2.keymetrics.io)。\n\n# 简介\n\n`pm2`=**P**(rocess) **M**(anager)2，是可以用于生产环境的Nodejs的进程管理工具，并且它内置一个负载均衡。它不仅可以保证服务不会中断一直在线，并且提供0秒reload功能，还有其他一系列进程管理、监控功能。并且使用起来非常简单。下面我将把我的使用过程分享出来，Nodejs应用是一个基于Express 4.x的应用，名称是`Wolverine`。\n\n"},{"title":"2016年，猴年快乐！","date":"2016-02-07T09:40:12.000Z","tags":["生活","近期想法","notion"],"photos":["/resources/happy-new-year-2016/happy.jpg"],"thumbnail":"/resources/happy-new-year-2016/happy.jpg","previewText":""},{"title":"升级Hexo2.X到3.0","date":"2015-04-11T21:47:32.000Z","tags":["hexo"],"photos":["/resources/hexo-update-to-3-0/hexo3a.png","/resources/hexo-update-to-3-0/hexo3b.png"],"thumbnail":"/resources/hexo-update-to-3-0/hexo3a.png","previewText":"我一般不想转或者写别人写过的一些东西，但是今天这篇文章算是转的，完全记录了我升级hexo的过程。为什么呢？实在是觊觎了很久了，一直没敢动手，3.0版本可是个大手术，据说好多主题和插件都挂了，现在这个主题我修改了不少，怕万一出个什么问题很麻烦。仅以此文来记录这次没什么意外地升级。\n\n## Hexo3.0新特性\n* 新的命令行工具：hexo-cli\n* 更轻量级的核心模块：generators，deployers和server都从主模块中分离出来了\n* 新的generator Api\n* 支持时区\n* [更多](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0)\n\n"},{"title":"JSON与Java对象的事","date":"2015-09-12T13:11:33.000Z","tags":["json","java","jackson"],"photos":["/resources/json-and-java-object/JSON.png"],"thumbnail":"/resources/json-and-java-object/JSON.png","previewText":"\n很久没有写了，来清理一下杂草。这片文字是团队内其他小伙伴经常混淆的一个知识点，最初的目的是写个东西好让大家用到的时候可查，由于原文涉及公司的一个框架，不便写出来。该框架其实引用的开源框架Jackson，所以本文直接介绍Jackson部分。其实说不上介绍，约等于一个学习笔记。\n"},{"title":"Jackson中的那些坑","date":"2015-10-30T08:19:33.000Z","tags":["json","java","jackson"],"photos":["/resources/json-and-java-object/JSON.png"],"thumbnail":"/resources/json-and-java-object/JSON.png","previewText":"\n# 不符合驼峰规范的变量\n“驼峰命名法”请自行百度。简单的来说就是变量的第一个单词以小写字母开始其他单词首字母大写，或者全部单词首字母都大写，分别称为“小驼峰”和“大驼峰”\n"},{"title":"第一篇blog","date":"2015-02-17T15:12:06.000Z","tags":["生活"],"previewText":""},{"title":"javascript前后端代码复用-browserify","date":"2015-11-18T09:36:11.000Z","tags":["Nodejs","javascript","browserify"],"photos":["/resources/node-on-browser-browserify/browserify.png"],"thumbnail":"/resources/node-on-browser-browserify/browserify.png","previewText":"Nodejs将javascript带上了一个新的高度，让之运行于浏览器端的javascript可以运行在服务器端。但是Nodejs遵循Commonjs规范，不能直接运行在浏览器端。虽然是同一种语言，但是前后端有着自己的库，不能复用真是一种浪费。\n这时候一个神器出现了，[Browserify](http://browserify.org/)。通过预编译，可以将Commonjs规范的后端Nodejs代码直接可以运行在浏览器端。打通了端后端代码复用的壁垒，为nodejs程序开辟了一片新天地。\n\n"},{"title":"使用Pjax优化你的网站","tags":["javascript","nprogress","pjax"],"photos":["/resources/pjax-your-blog/pjax.png"],"thumbnail":"/resources/pjax-your-blog/pjax.png","categories":[],"date":"2015-12-03T12:32:00.000Z","previewText":"Ajax（Asynchronous Javascript and XML）的魅力在于它的每一个成员都不是新技术，经过奇妙的结合却掀起了WEB2.0的革命。`Pjax`是`pushState`和`ajax`的封装，同样每一个都算不上新技术，结合起来却有着神奇的效果。\n\n"},{"title":"基于Firebase的Hexo博客实时访问数统计","date":"2015-02-27T15:12:06.000Z","tags":["技术","firebase","hexo"],"photos":["/resources/realtime-count-firebase/firebase.PNG"],"thumbnail":"/resources/realtime-count-firebase/firebase.PNG","previewText":"\n本来想写一个HEXO的搭建过程的，但是在搜索引擎上一搜一大把教程。看到有人评论：“你写这个跟HEXO官方的教程比好在哪？”仔细想想，说的极好。索性也就不写这个人家已经写烂了的东西了。附一个[官方教程链接](http://hexo.io/docs/)。其实在搭建过程中还参考了一个很全面很详细的博客，也附上链接吧，[ibruce不如](http://ibruce.info/2013/11/22/hexo-your-blog/)。\n对于像HEXO这种静态博客来讲，想要做到一些动态的功能就必须得靠第三方支持，比如评论可以使用多说、Disqus。虽然我的blog的访问人数少的可怜，但是我还是希望知道有多少访问量的。于是乎发现了FireBase这个神奇的东西，它是一个制作实时应用的框架，用它来统计访问量绰绰有余啦。它可以做到的就像本博客下面的一样，你可以尝试开启两个本博客窗口，然后刷新其中一个，看看另外一个页面，是不是很神奇？另一个页面的访问量也实时增加了！\n\n"},{"title":"近期想法汇总2015年9月","date":"2015-09-15T14:59:45.000Z","tags":["近期想法","notion"],"photos":["/resources/recent-thinking/thinking.png"],"thumbnail":"/resources/recent-thinking/thinking.png","previewText":"\n打算新开一类主题，主要用来记录近期的一些想法，有想好了要做的事情，也有要做但是还没有思路的事情。类似LifeHacker那样，不仅仅有编程相关。可以有技术、科技、设计、生活想法等等，如果时机成熟，这一个个的点子实践以后会形成一片单独的文章，如果我一直没有想法，看到这篇文章的人也可以在评论里帮我出出主意。这篇文字是第一次尝试。\n"},{"title":"迈向PWA！利用serviceworker的离线访问模式","date":"2017-02-08T08:02:10.000Z","tags":["javascript","ServiceWorker","PWA"],"photos":["/resources/service-worker-offlinemode/yuanli.png"],"thumbnail":"/resources/service-worker-offlinemode/yuanli.png","previewText":"微信小程序来了，可以利用WEB技术在微信打造一个有着Native应用体验的应用，业界非常看好这种形式。但是你们也许不知道，Google早已有类似的规划，甚至层次更高。那就是PWA（渐进式增强WEB应用）。\nPWA有以下几种特性：\n- Installablity（可安装性）\n- App Shell\n- Offline（离线能力）\n- Re-engageable（推送通知能力）\n\n所有这些特性都是“优雅降级、渐进增强的”，给支持的设备更好的体验，不支持的设备也不会更差。这就和微信小程序这种二流设计的根本不同之处。\n"},{"title":"使用Swiftype为静态博客添加站内搜索","date":"2015-03-24T21:35:58.000Z","tags":["技术","site search","swiftype","hexo"],"photos":["/resources/site-search-with-swiftype/swiftype.png"],"thumbnail":"/resources/site-search-with-swiftype/swiftype.png","previewText":">为网站、App提供站内搜索的Swiftype获1300万美元B轮融资。Swiftype可以为网站及移动App提供内置搜索引擎服务，搜索服务的部署非常简单，只需要插入一行JS代码即可搞定。于Google相比，高度可定制化是它的优势。\n来自：36Kr\n\n"},{"title":"TiD大会感想之浅谈前端工具化与工程化","date":"2017-07-31T11:31:27.000Z","tags":["ci","cd","javascript","vue"],"previewText":"今年有幸参加了一天的质量竞争力大会，众多的课程当中，无法分身的我听了其中两节。分别是“终端重构之旅”以及“微服务下的持续交付”。由于“终端重构之旅”涉及硬件终端，与我们平时工作相距较远，所以本文着重谈谈对“微服务下的持续交付”的感想。\n## 微服务下的持续交付\n微服务（`Micro Service`）是一种将复杂的业务逻辑拆分成多个高度自制的独立系统的架构设计。微服务为构建可扩展、可维护的大规模服务集群带来了很大的便利。\n持续交付：交付是指将最终产品发布到线上环境，给用户使用。持续交付就是指在软件开发过程中，从需求识别到交付的过程中，总是能够以较短的周期完成需求的小粒度频繁交付。频繁的交付带来了对软件更迅速的反馈，相比于传统的模式，有着更少的浪费。\n来自ThoughtWorks的两位讲师，利用一个简单的电商需求，演示了如何使用微服务来完成需求，并且将微服务做到持续交付。介绍了从构建、测试、部署到环境监控分析等一整套工具链。我认为要做到持续交付很重要的一点一定是要做到工程的工具化以及工程化。\n虽然网银还未做到微服务化，但是网银目前的前后端分离架构也有着许多微服务的特点。也急需进行工具化和工程化。前期一直在进行新一代前端框架的预研，很多思路与讲师产生了共鸣。针对我自己的理解和实践介绍一下前端的工具化与、工程化。\n"},{"title":"不用cookie我也能追踪你！","date":"2015-03-09T09:30:10.000Z","tags":["技术","cookie","html5","canvas","javascript"],"photos":["/resources/track-u-without-cookie/cookie.png"],"thumbnail":"/resources/track-u-without-cookie/cookie.png","previewText":"\n抱歉起了这么个“吸引人的”标题，但我不是标题党。最近由于工作上的一些事情，涉及到识别、追踪设备的项目来了几个，从一篇论文《The Web Never Forgets》无意间又发现了这个技术。查阅了一些资料。做了个小Demo应用到了本博客上。对！你没听错，本页面在追踪你。不过也没那么可怕。看看本站的Visitor Info模块，它可能在屏幕右侧也可能在最底下。这个模块会知道你是否之前访问过本站，并且结合了上一篇博文[基于Firebase的Hexo博客实时访问数统计](http://pangjian.info/2015/02/27/realtime-count-firebase/)中提到的访问数统计，做到了记录每一位访问者的访问次数。即使你关闭了cookie。^ _ ^\n"},{"title":"使用travis-ci持续集成Hexo静态博客","tags":["hexo","travis-ci"],"photos":["/resources/travis-ci-hexo/travis-ci.png"],"thumbnail":"/resources/travis-ci-hexo/travis-ci.png","categories":[],"date":"2016-05-25T15:37:00.000Z","previewText":"Hexo是一个基于Nodejs的轻量级静态博客生成框架。静态博客生成程序会将我们所写的博客生成为一套HTML+CSS+JavaScript代码，我们将这个代码部署到诸如Github Page这样的地方就可以在世界任何一个地方访问我们的博客了。这种方案有一个非常有利的优点--免费。但是，hexo环境不是处处都有，换个地方写作变成了一件麻烦事。而且写完文章以后需要`hexo g`，`hexo d`等一系列操作，着实很麻烦。本篇文章利用Travis CI解决以上痛点。\n"},{"title":"写给后端开发者看的Vue前端介绍（一）--基础篇","date":"2017-04-05T16:51:15.000Z","tags":["vue","javascript","nodejs"],"previewText":""},{"title":"写给后端开发者看的Vue前端介绍（二）--单元测试","date":"2018-01-12T10:41:27.000Z","tags":["vue","javascript","ci"],"previewText":"\n上一篇“基础篇”聊到了一些`Vue`、`Nodejs`、`Webpack`的基本概念。本篇将着重讲解 `Vue`前端工程如何做单元测试。学习一个新技术，必须要清楚两个W，\"What && Why\"。\"XX 是什么？\"，\"为什么要使用 XX ，或者说 XX 有什么好处\"，最后才是\"XX 怎么使用\"。本文也将从“前端单元测试是什么”、“为什么要做单元测试”进行讨论。\n\n## 前端单元测试是什么?\n> 单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。——百度百科\n\n"},{"title":"浏览器缓存知识归纳","date":"2016-03-05T13:53:54.000Z","tags":["cache"],"photos":["/resources/web-cache-detail/web-cache.png"],"thumbnail":"/resources/web-cache-detail/web-cache.png","previewText":"写在开头：这篇文章是打算分享到单位内部的材料。归纳浏览器缓存也是对一个生产问题的分析总结出来的。这片文章经过脱敏以后发表到个人博客上面吧。\n\n浏览器缓存（Browser Catching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。 ----摘自《百度百科》\n\n浏览器缓存是提升网页性能的一大利器，但是，也是一把双刃剑。利用的好网页的性能会有大幅度提升，服务器的压力也会减小。利用的不好，也会遇到很多的问题。本文结合浏览器缓存的知识，结合真实案例进行分析，希望对读者有所帮助。\n"},{"title":"全站HTTPS改造","date":"2017-01-24T11:30:09.000Z","tags":["https","nginx"],"photos":["/resources/whole-site-https/https.png"],"thumbnail":"/resources/whole-site-https/https.png","previewText":"HTTPS大势已来，2016年6月苹果宣布要求所有iOS Apps在2017年初全部使用HTTPS，11月Google宣布，从17年1月开始，对没有使用HTTPS的网站竖起“不安全”的小红旗。15年，淘宝、天猫也启动了HTTPS迁移。国内网络环境也不太好，经常会有运营商篡改页面的情况，为了更安全的客户体验，避免各种情况同事顺应大势所趋，本博客也进行了全站HTTPS化。\n"}]